"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Search } from "lucide-react"

interface EmojiPickerProps {
  value: string
  onChange: (emoji: string) => void
}

const EMOJI_CATEGORIES = {
  Smileys: [
    "üòÄ",
    "üòÉ",
    "üòÑ",
    "üòÅ",
    "üòÜ",
    "üòÖ",
    "üòÇ",
    "ü§£",
    "üòä",
    "üòá",
    "üôÇ",
    "üôÉ",
    "üòâ",
    "üòå",
    "üòç",
    "ü•∞",
    "üòò",
    "üòó",
    "üòô",
    "üòö",
    "üòã",
    "üòõ",
    "üòù",
    "üòú",
    "ü§™",
    "ü§®",
    "üßê",
    "ü§ì",
    "üòé",
    "ü§©",
    "ü•≥",
    "üòè",
    "üòí",
    "üòû",
    "üòî",
    "üòü",
    "üòï",
    "üôÅ",
    "‚òπÔ∏è",
    "üò£",
    "üòñ",
    "üò´",
    "üò©",
    "ü•∫",
    "üò¢",
    "üò≠",
    "üò§",
    "üò†",
    "üò°",
    "ü§¨",
    "ü§Ø",
    "üò≥",
    "ü•µ",
    "ü•∂",
    "üò±",
    "üò®",
    "üò∞",
    "üò•",
    "üòì",
    "ü§ó",
    "ü§î",
    "ü§≠",
    "ü§´",
    "ü§•",
  ],
  People: [
    "üë∂",
    "üßí",
    "üë¶",
    "üëß",
    "üßë",
    "üë±",
    "üë®",
    "üßî",
    "üë©",
    "üßì",
    "üë¥",
    "üëµ",
    "üôç",
    "üôé",
    "üôÖ",
    "üôÜ",
    "üíÅ",
    "üôã",
    "üßè",
    "üôá",
    "ü§¶",
    "ü§∑",
    "üëÆ",
    "üïµÔ∏è",
    "üíÇ",
    "üë∑",
    "ü§¥",
    "üë∏",
    "üë≥",
    "üë≤",
    "üßï",
    "ü§µ",
    "üë∞",
    "ü§∞",
    "ü§±",
    "üëº",
    "üéÖ",
    "ü§∂",
    "ü¶∏",
    "ü¶π",
    "üßô",
    "üßö",
    "üßõ",
    "üßú",
    "üßù",
    "üßû",
    "üßü",
    "üíÜ",
  ],
  Animals: [
    "üê∂",
    "üê±",
    "üê≠",
    "üêπ",
    "üê∞",
    "ü¶ä",
    "üêª",
    "üêº",
    "üê®",
    "üêØ",
    "ü¶Å",
    "üêÆ",
    "üê∑",
    "üêΩ",
    "üê∏",
    "üêµ",
    "üôà",
    "üôâ",
    "üôä",
    "üêí",
    "üêî",
    "üêß",
    "üê¶",
    "üê§",
    "üê£",
    "üê•",
    "ü¶Ü",
    "ü¶Ö",
    "ü¶â",
    "ü¶á",
    "üê∫",
    "üêó",
    "üê¥",
    "ü¶Ñ",
    "üêù",
    "üêõ",
    "ü¶ã",
    "üêå",
    "üêû",
    "üêú",
    "ü¶ü",
    "ü¶ó",
    "üï∑Ô∏è",
    "ü¶Ç",
    "üê¢",
    "üêç",
    "ü¶é",
    "ü¶ñ",
  ],
  Food: [
    "üçé",
    "üçê",
    "üçä",
    "üçã",
    "üçå",
    "üçâ",
    "üçá",
    "üçì",
    "ü´ê",
    "üçà",
    "üçí",
    "üçë",
    "ü•≠",
    "üçç",
    "ü••",
    "ü•ù",
    "üçÖ",
    "üçÜ",
    "ü•ë",
    "ü•¶",
    "ü•¨",
    "ü•í",
    "üå∂Ô∏è",
    "ü´ë",
    "üåΩ",
    "ü•ï",
    "ü´í",
    "üßÑ",
    "üßÖ",
    "ü•î",
    "üç†",
    "ü•ê",
    "ü•ñ",
    "üçû",
    "ü•®",
    "ü•Ø",
    "üßÄ",
    "ü•ö",
    "üç≥",
    "üßà",
    "ü•û",
    "üßá",
    "ü•ì",
    "ü•©",
    "üçó",
    "üçñ",
    "ü¶¥",
    "üå≠",
  ],
  Activities: [
    "‚öΩ",
    "üèÄ",
    "üèà",
    "‚öæ",
    "ü•é",
    "üéæ",
    "üèê",
    "üèâ",
    "ü•è",
    "üé±",
    "ü™Ä",
    "üèì",
    "üè∏",
    "üèí",
    "üèë",
    "ü•ç",
    "üèè",
    "ü™É",
    "ü•Ö",
    "‚õ≥",
    "ü™Å",
    "üèπ",
    "üé£",
    "ü§ø",
    "ü•ä",
    "ü•ã",
    "üéΩ",
    "üõπ",
    "üõ∑",
    "‚õ∏Ô∏è",
    "ü•å",
    "üéø",
    "‚õ∑Ô∏è",
    "üèÇ",
    "ü™Ç",
    "üèãÔ∏è",
    "ü§º",
    "ü§∏",
    "‚õπÔ∏è",
    "ü§∫",
    "üèåÔ∏è",
    "üèá",
    "üßò",
    "üèÑ",
    "üèä",
    "ü§Ω",
    "üö£",
    "üßó",
  ],
  Travel: [
    "üöó",
    "üöï",
    "üöô",
    "üöå",
    "üöé",
    "üèéÔ∏è",
    "üöì",
    "üöë",
    "üöí",
    "üöê",
    "üõª",
    "üöö",
    "üöõ",
    "üöú",
    "üèçÔ∏è",
    "üõµ",
    "üö≤",
    "üõ¥",
    "üõπ",
    "üõº",
    "üöÅ",
    "üõ∏",
    "‚úàÔ∏è",
    "üõ©Ô∏è",
    "ü™Ç",
    "‚õµ",
    "üö§",
    "üõ•Ô∏è",
    "üõ≥Ô∏è",
    "‚õ¥Ô∏è",
    "üö¢",
    "‚öì",
    "‚õΩ",
    "üöß",
    "üö¶",
    "üö•",
    "üó∫Ô∏è",
    "üóø",
    "üóΩ",
    "üóº",
    "üè∞",
    "üèØ",
    "üèüÔ∏è",
    "üé°",
    "üé¢",
    "üé†",
    "‚õ≤",
    "‚õ±Ô∏è",
  ],
  Objects: [
    "‚åö",
    "üì±",
    "üì≤",
    "üíª",
    "‚å®Ô∏è",
    "üñ•Ô∏è",
    "üñ®Ô∏è",
    "üñ±Ô∏è",
    "üñ≤Ô∏è",
    "üïπÔ∏è",
    "üóúÔ∏è",
    "üíΩ",
    "üíæ",
    "üíø",
    "üìÄ",
    "üìº",
    "üì∑",
    "üì∏",
    "üìπ",
    "üé•",
    "üìΩÔ∏è",
    "üéûÔ∏è",
    "üìû",
    "‚òéÔ∏è",
    "üìü",
    "üì†",
    "üì∫",
    "üìª",
    "üéôÔ∏è",
    "üéöÔ∏è",
    "üéõÔ∏è",
    "üß≠",
    "‚è±Ô∏è",
    "‚è≤Ô∏è",
    "‚è∞",
    "üï∞Ô∏è",
    "‚åõ",
    "‚è≥",
    "üì°",
    "üîã",
    "üîå",
    "üí°",
    "üî¶",
    "üïØÔ∏è",
    "ü™î",
    "üßØ",
    "üõ¢Ô∏è",
    "üí∏",
  ],
  Symbols: [
    "‚ù§Ô∏è",
    "üß°",
    "üíõ",
    "üíö",
    "üíô",
    "üíú",
    "üñ§",
    "ü§ç",
    "ü§é",
    "üíî",
    "‚ù£Ô∏è",
    "üíï",
    "üíû",
    "üíì",
    "üíó",
    "üíñ",
    "üíò",
    "üíù",
    "üíü",
    "‚òÆÔ∏è",
    "‚úùÔ∏è",
    "‚ò™Ô∏è",
    "üïâÔ∏è",
    "‚ò∏Ô∏è",
    "‚ú°Ô∏è",
    "üîØ",
    "üïé",
    "‚òØÔ∏è",
    "‚ò¶Ô∏è",
    "üõê",
    "‚õé",
    "‚ôà",
    "‚ôâ",
    "‚ôä",
    "‚ôã",
    "‚ôå",
    "‚ôç",
    "‚ôé",
    "‚ôè",
    "‚ôê",
    "‚ôë",
    "‚ôí",
    "‚ôì",
    "üÜî",
    "‚öõÔ∏è",
    "üâë",
    "‚ò¢Ô∏è",
    "‚ò£Ô∏è",
    "üì¥",
    "üì≥",
  ],
}

export function EmojiPicker({ value, onChange }: EmojiPickerProps) {
  const [searchTerm, setSearchTerm] = useState("")
  const [activeTab, setActiveTab] = useState("Smileys")
  const [open, setOpen] = useState(false)

  const allEmojis = Object.values(EMOJI_CATEGORIES).flat()

  const filteredEmojis = searchTerm
    ? allEmojis.filter((emoji) => {
        // Simple search - could be enhanced with emoji names/keywords
        return true // For now, show all emojis when searching
      })
    : EMOJI_CATEGORIES[activeTab as keyof typeof EMOJI_CATEGORIES] || []

  const handleEmojiSelect = (emoji: string) => {
    console.log("[v0] Emoji selected:", emoji)
    onChange(emoji)
    setOpen(false)
  }

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="sm"
          className="w-8 h-8 p-0 text-lg cursor-pointer hover:bg-muted"
          onClick={() => {
            console.log("[v0] Emoji picker trigger clicked, current open state:", open)
            setOpen(!open)
          }}
        >
          {value || "üòÄ"}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-96 p-3">
        <div className="space-y-3">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-2 top-1/2 transform -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search emojis..."
              className="pl-8 h-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          {!searchTerm ? (
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="Smileys" className="text-xs cursor-pointer">
                  üòÄ
                </TabsTrigger>
                <TabsTrigger value="People" className="text-xs cursor-pointer">
                  üë§
                </TabsTrigger>
                <TabsTrigger value="Animals" className="text-xs cursor-pointer">
                  üê∂
                </TabsTrigger>
                <TabsTrigger value="Food" className="text-xs cursor-pointer">
                  üçé
                </TabsTrigger>
              </TabsList>
              <TabsList className="grid w-full grid-cols-4 mt-1">
                <TabsTrigger value="Activities" className="text-xs cursor-pointer">
                  ‚öΩ
                </TabsTrigger>
                <TabsTrigger value="Travel" className="text-xs cursor-pointer">
                  üöó
                </TabsTrigger>
                <TabsTrigger value="Objects" className="text-xs cursor-pointer">
                  üíª
                </TabsTrigger>
                <TabsTrigger value="Symbols" className="text-xs cursor-pointer">
                  ‚ù§Ô∏è
                </TabsTrigger>
              </TabsList>

              {Object.entries(EMOJI_CATEGORIES).map(([category, emojis]) => (
                <TabsContent key={category} value={category} className="mt-2">
                  <div className="grid grid-cols-8 gap-1 max-h-48 overflow-y-auto">
                    {emojis.map((emoji) => (
                      <Button
                        key={emoji}
                        variant="ghost"
                        size="sm"
                        className="w-8 h-8 p-0 text-lg hover:bg-muted cursor-pointer"
                        onClick={() => handleEmojiSelect(emoji)}
                      >
                        {emoji}
                      </Button>
                    ))}
                  </div>
                </TabsContent>
              ))}
            </Tabs>
          ) : (
            <div className="grid grid-cols-8 gap-1 max-h-48 overflow-y-auto">
              {allEmojis.map((emoji) => (
                <Button
                  key={emoji}
                  variant="ghost"
                  size="sm"
                  className="w-8 h-8 p-0 text-lg hover:bg-muted cursor-pointer"
                  onClick={() => handleEmojiSelect(emoji)}
                >
                  {emoji}
                </Button>
              ))}
            </div>
          )}
        </div>
      </PopoverContent>
    </Popover>
  )
}
